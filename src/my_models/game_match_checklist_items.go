// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// GameMatchChecklistItem is an object representing the database table.
type GameMatchChecklistItem struct {
	ID        string `boil:"id" json:"id" toml:"id" yaml:"id"`
	MatchID   string `boil:"match_id" json:"match_id" toml:"match_id" yaml:"match_id"`
	Title     string `boil:"title" json:"title" toml:"title" yaml:"title"`
	IsChecked bool   `boil:"is_checked" json:"is_checked" toml:"is_checked" yaml:"is_checked"`

	R *gameMatchChecklistItemR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L gameMatchChecklistItemL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var GameMatchChecklistItemColumns = struct {
	ID        string
	MatchID   string
	Title     string
	IsChecked string
}{
	ID:        "id",
	MatchID:   "match_id",
	Title:     "title",
	IsChecked: "is_checked",
}

var GameMatchChecklistItemTableColumns = struct {
	ID        string
	MatchID   string
	Title     string
	IsChecked string
}{
	ID:        "game_match_checklist_items.id",
	MatchID:   "game_match_checklist_items.match_id",
	Title:     "game_match_checklist_items.title",
	IsChecked: "game_match_checklist_items.is_checked",
}

// Generated where

var GameMatchChecklistItemWhere = struct {
	ID        whereHelperstring
	MatchID   whereHelperstring
	Title     whereHelperstring
	IsChecked whereHelperbool
}{
	ID:        whereHelperstring{field: "\"game_match_checklist_items\".\"id\""},
	MatchID:   whereHelperstring{field: "\"game_match_checklist_items\".\"match_id\""},
	Title:     whereHelperstring{field: "\"game_match_checklist_items\".\"title\""},
	IsChecked: whereHelperbool{field: "\"game_match_checklist_items\".\"is_checked\""},
}

// GameMatchChecklistItemRels is where relationship names are stored.
var GameMatchChecklistItemRels = struct {
}{}

// gameMatchChecklistItemR is where relationships are stored.
type gameMatchChecklistItemR struct {
}

// NewStruct creates a new relationship struct
func (*gameMatchChecklistItemR) NewStruct() *gameMatchChecklistItemR {
	return &gameMatchChecklistItemR{}
}

// gameMatchChecklistItemL is where Load methods for each relationship are stored.
type gameMatchChecklistItemL struct{}

var (
	gameMatchChecklistItemAllColumns            = []string{"id", "match_id", "title", "is_checked"}
	gameMatchChecklistItemColumnsWithoutDefault = []string{"id", "match_id", "title", "is_checked"}
	gameMatchChecklistItemColumnsWithDefault    = []string{}
	gameMatchChecklistItemPrimaryKeyColumns     = []string{"id"}
	gameMatchChecklistItemGeneratedColumns      = []string{}
)

type (
	// GameMatchChecklistItemSlice is an alias for a slice of pointers to GameMatchChecklistItem.
	// This should almost always be used instead of []GameMatchChecklistItem.
	GameMatchChecklistItemSlice []*GameMatchChecklistItem
	// GameMatchChecklistItemHook is the signature for custom GameMatchChecklistItem hook methods
	GameMatchChecklistItemHook func(context.Context, boil.ContextExecutor, *GameMatchChecklistItem) error

	gameMatchChecklistItemQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	gameMatchChecklistItemType                 = reflect.TypeOf(&GameMatchChecklistItem{})
	gameMatchChecklistItemMapping              = queries.MakeStructMapping(gameMatchChecklistItemType)
	gameMatchChecklistItemPrimaryKeyMapping, _ = queries.BindMapping(gameMatchChecklistItemType, gameMatchChecklistItemMapping, gameMatchChecklistItemPrimaryKeyColumns)
	gameMatchChecklistItemInsertCacheMut       sync.RWMutex
	gameMatchChecklistItemInsertCache          = make(map[string]insertCache)
	gameMatchChecklistItemUpdateCacheMut       sync.RWMutex
	gameMatchChecklistItemUpdateCache          = make(map[string]updateCache)
	gameMatchChecklistItemUpsertCacheMut       sync.RWMutex
	gameMatchChecklistItemUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var gameMatchChecklistItemAfterSelectHooks []GameMatchChecklistItemHook

var gameMatchChecklistItemBeforeInsertHooks []GameMatchChecklistItemHook
var gameMatchChecklistItemAfterInsertHooks []GameMatchChecklistItemHook

var gameMatchChecklistItemBeforeUpdateHooks []GameMatchChecklistItemHook
var gameMatchChecklistItemAfterUpdateHooks []GameMatchChecklistItemHook

var gameMatchChecklistItemBeforeDeleteHooks []GameMatchChecklistItemHook
var gameMatchChecklistItemAfterDeleteHooks []GameMatchChecklistItemHook

var gameMatchChecklistItemBeforeUpsertHooks []GameMatchChecklistItemHook
var gameMatchChecklistItemAfterUpsertHooks []GameMatchChecklistItemHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *GameMatchChecklistItem) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gameMatchChecklistItemAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *GameMatchChecklistItem) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gameMatchChecklistItemBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *GameMatchChecklistItem) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gameMatchChecklistItemAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *GameMatchChecklistItem) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gameMatchChecklistItemBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *GameMatchChecklistItem) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gameMatchChecklistItemAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *GameMatchChecklistItem) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gameMatchChecklistItemBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *GameMatchChecklistItem) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gameMatchChecklistItemAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *GameMatchChecklistItem) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gameMatchChecklistItemBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *GameMatchChecklistItem) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gameMatchChecklistItemAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddGameMatchChecklistItemHook registers your hook function for all future operations.
func AddGameMatchChecklistItemHook(hookPoint boil.HookPoint, gameMatchChecklistItemHook GameMatchChecklistItemHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		gameMatchChecklistItemAfterSelectHooks = append(gameMatchChecklistItemAfterSelectHooks, gameMatchChecklistItemHook)
	case boil.BeforeInsertHook:
		gameMatchChecklistItemBeforeInsertHooks = append(gameMatchChecklistItemBeforeInsertHooks, gameMatchChecklistItemHook)
	case boil.AfterInsertHook:
		gameMatchChecklistItemAfterInsertHooks = append(gameMatchChecklistItemAfterInsertHooks, gameMatchChecklistItemHook)
	case boil.BeforeUpdateHook:
		gameMatchChecklistItemBeforeUpdateHooks = append(gameMatchChecklistItemBeforeUpdateHooks, gameMatchChecklistItemHook)
	case boil.AfterUpdateHook:
		gameMatchChecklistItemAfterUpdateHooks = append(gameMatchChecklistItemAfterUpdateHooks, gameMatchChecklistItemHook)
	case boil.BeforeDeleteHook:
		gameMatchChecklistItemBeforeDeleteHooks = append(gameMatchChecklistItemBeforeDeleteHooks, gameMatchChecklistItemHook)
	case boil.AfterDeleteHook:
		gameMatchChecklistItemAfterDeleteHooks = append(gameMatchChecklistItemAfterDeleteHooks, gameMatchChecklistItemHook)
	case boil.BeforeUpsertHook:
		gameMatchChecklistItemBeforeUpsertHooks = append(gameMatchChecklistItemBeforeUpsertHooks, gameMatchChecklistItemHook)
	case boil.AfterUpsertHook:
		gameMatchChecklistItemAfterUpsertHooks = append(gameMatchChecklistItemAfterUpsertHooks, gameMatchChecklistItemHook)
	}
}

// One returns a single gameMatchChecklistItem record from the query.
func (q gameMatchChecklistItemQuery) One(ctx context.Context, exec boil.ContextExecutor) (*GameMatchChecklistItem, error) {
	o := &GameMatchChecklistItem{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for game_match_checklist_items")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all GameMatchChecklistItem records from the query.
func (q gameMatchChecklistItemQuery) All(ctx context.Context, exec boil.ContextExecutor) (GameMatchChecklistItemSlice, error) {
	var o []*GameMatchChecklistItem

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to GameMatchChecklistItem slice")
	}

	if len(gameMatchChecklistItemAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all GameMatchChecklistItem records in the query.
func (q gameMatchChecklistItemQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count game_match_checklist_items rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q gameMatchChecklistItemQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if game_match_checklist_items exists")
	}

	return count > 0, nil
}

// GameMatchChecklistItems retrieves all the records using an executor.
func GameMatchChecklistItems(mods ...qm.QueryMod) gameMatchChecklistItemQuery {
	mods = append(mods, qm.From("\"game_match_checklist_items\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"game_match_checklist_items\".*"})
	}

	return gameMatchChecklistItemQuery{q}
}

// FindGameMatchChecklistItem retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindGameMatchChecklistItem(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*GameMatchChecklistItem, error) {
	gameMatchChecklistItemObj := &GameMatchChecklistItem{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"game_match_checklist_items\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, gameMatchChecklistItemObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from game_match_checklist_items")
	}

	if err = gameMatchChecklistItemObj.doAfterSelectHooks(ctx, exec); err != nil {
		return gameMatchChecklistItemObj, err
	}

	return gameMatchChecklistItemObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *GameMatchChecklistItem) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no game_match_checklist_items provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(gameMatchChecklistItemColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	gameMatchChecklistItemInsertCacheMut.RLock()
	cache, cached := gameMatchChecklistItemInsertCache[key]
	gameMatchChecklistItemInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			gameMatchChecklistItemAllColumns,
			gameMatchChecklistItemColumnsWithDefault,
			gameMatchChecklistItemColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(gameMatchChecklistItemType, gameMatchChecklistItemMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(gameMatchChecklistItemType, gameMatchChecklistItemMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"game_match_checklist_items\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"game_match_checklist_items\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into game_match_checklist_items")
	}

	if !cached {
		gameMatchChecklistItemInsertCacheMut.Lock()
		gameMatchChecklistItemInsertCache[key] = cache
		gameMatchChecklistItemInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the GameMatchChecklistItem.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *GameMatchChecklistItem) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	gameMatchChecklistItemUpdateCacheMut.RLock()
	cache, cached := gameMatchChecklistItemUpdateCache[key]
	gameMatchChecklistItemUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			gameMatchChecklistItemAllColumns,
			gameMatchChecklistItemPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update game_match_checklist_items, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"game_match_checklist_items\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, gameMatchChecklistItemPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(gameMatchChecklistItemType, gameMatchChecklistItemMapping, append(wl, gameMatchChecklistItemPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update game_match_checklist_items row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for game_match_checklist_items")
	}

	if !cached {
		gameMatchChecklistItemUpdateCacheMut.Lock()
		gameMatchChecklistItemUpdateCache[key] = cache
		gameMatchChecklistItemUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q gameMatchChecklistItemQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for game_match_checklist_items")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for game_match_checklist_items")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o GameMatchChecklistItemSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), gameMatchChecklistItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"game_match_checklist_items\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, gameMatchChecklistItemPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in gameMatchChecklistItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all gameMatchChecklistItem")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *GameMatchChecklistItem) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no game_match_checklist_items provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(gameMatchChecklistItemColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	gameMatchChecklistItemUpsertCacheMut.RLock()
	cache, cached := gameMatchChecklistItemUpsertCache[key]
	gameMatchChecklistItemUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			gameMatchChecklistItemAllColumns,
			gameMatchChecklistItemColumnsWithDefault,
			gameMatchChecklistItemColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			gameMatchChecklistItemAllColumns,
			gameMatchChecklistItemPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert game_match_checklist_items, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(gameMatchChecklistItemPrimaryKeyColumns))
			copy(conflict, gameMatchChecklistItemPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"game_match_checklist_items\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(gameMatchChecklistItemType, gameMatchChecklistItemMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(gameMatchChecklistItemType, gameMatchChecklistItemMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert game_match_checklist_items")
	}

	if !cached {
		gameMatchChecklistItemUpsertCacheMut.Lock()
		gameMatchChecklistItemUpsertCache[key] = cache
		gameMatchChecklistItemUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single GameMatchChecklistItem record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *GameMatchChecklistItem) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no GameMatchChecklistItem provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), gameMatchChecklistItemPrimaryKeyMapping)
	sql := "DELETE FROM \"game_match_checklist_items\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from game_match_checklist_items")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for game_match_checklist_items")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q gameMatchChecklistItemQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no gameMatchChecklistItemQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from game_match_checklist_items")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for game_match_checklist_items")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o GameMatchChecklistItemSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(gameMatchChecklistItemBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), gameMatchChecklistItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"game_match_checklist_items\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, gameMatchChecklistItemPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from gameMatchChecklistItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for game_match_checklist_items")
	}

	if len(gameMatchChecklistItemAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *GameMatchChecklistItem) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindGameMatchChecklistItem(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GameMatchChecklistItemSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := GameMatchChecklistItemSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), gameMatchChecklistItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"game_match_checklist_items\".* FROM \"game_match_checklist_items\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, gameMatchChecklistItemPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in GameMatchChecklistItemSlice")
	}

	*o = slice

	return nil
}

// GameMatchChecklistItemExists checks if the GameMatchChecklistItem row exists.
func GameMatchChecklistItemExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"game_match_checklist_items\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if game_match_checklist_items exists")
	}

	return exists, nil
}

// Exists checks if the GameMatchChecklistItem row exists.
func (o *GameMatchChecklistItem) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return GameMatchChecklistItemExists(ctx, exec, o.ID)
}
