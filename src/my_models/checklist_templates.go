// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ChecklistTemplate is an object representing the database table.
type ChecklistTemplate struct {
	ID              string `boil:"id" json:"id" toml:"id" yaml:"id"`
	TemplateName    string `boil:"template_name" json:"template_name" toml:"template_name" yaml:"template_name"`
	GameTitleID     string `boil:"game_title_id" json:"game_title_id" toml:"game_title_id" yaml:"game_title_id"`
	CreatedByUserID string `boil:"created_by_user_id" json:"created_by_user_id" toml:"created_by_user_id" yaml:"created_by_user_id"`

	R *checklistTemplateR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L checklistTemplateL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ChecklistTemplateColumns = struct {
	ID              string
	TemplateName    string
	GameTitleID     string
	CreatedByUserID string
}{
	ID:              "id",
	TemplateName:    "template_name",
	GameTitleID:     "game_title_id",
	CreatedByUserID: "created_by_user_id",
}

var ChecklistTemplateTableColumns = struct {
	ID              string
	TemplateName    string
	GameTitleID     string
	CreatedByUserID string
}{
	ID:              "checklist_templates.id",
	TemplateName:    "checklist_templates.template_name",
	GameTitleID:     "checklist_templates.game_title_id",
	CreatedByUserID: "checklist_templates.created_by_user_id",
}

// Generated where

var ChecklistTemplateWhere = struct {
	ID              whereHelperstring
	TemplateName    whereHelperstring
	GameTitleID     whereHelperstring
	CreatedByUserID whereHelperstring
}{
	ID:              whereHelperstring{field: "\"checklist_templates\".\"id\""},
	TemplateName:    whereHelperstring{field: "\"checklist_templates\".\"template_name\""},
	GameTitleID:     whereHelperstring{field: "\"checklist_templates\".\"game_title_id\""},
	CreatedByUserID: whereHelperstring{field: "\"checklist_templates\".\"created_by_user_id\""},
}

// ChecklistTemplateRels is where relationship names are stored.
var ChecklistTemplateRels = struct {
}{}

// checklistTemplateR is where relationships are stored.
type checklistTemplateR struct {
}

// NewStruct creates a new relationship struct
func (*checklistTemplateR) NewStruct() *checklistTemplateR {
	return &checklistTemplateR{}
}

// checklistTemplateL is where Load methods for each relationship are stored.
type checklistTemplateL struct{}

var (
	checklistTemplateAllColumns            = []string{"id", "template_name", "game_title_id", "created_by_user_id"}
	checklistTemplateColumnsWithoutDefault = []string{"id", "template_name", "game_title_id", "created_by_user_id"}
	checklistTemplateColumnsWithDefault    = []string{}
	checklistTemplatePrimaryKeyColumns     = []string{"id"}
	checklistTemplateGeneratedColumns      = []string{}
)

type (
	// ChecklistTemplateSlice is an alias for a slice of pointers to ChecklistTemplate.
	// This should almost always be used instead of []ChecklistTemplate.
	ChecklistTemplateSlice []*ChecklistTemplate
	// ChecklistTemplateHook is the signature for custom ChecklistTemplate hook methods
	ChecklistTemplateHook func(context.Context, boil.ContextExecutor, *ChecklistTemplate) error

	checklistTemplateQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	checklistTemplateType                 = reflect.TypeOf(&ChecklistTemplate{})
	checklistTemplateMapping              = queries.MakeStructMapping(checklistTemplateType)
	checklistTemplatePrimaryKeyMapping, _ = queries.BindMapping(checklistTemplateType, checklistTemplateMapping, checklistTemplatePrimaryKeyColumns)
	checklistTemplateInsertCacheMut       sync.RWMutex
	checklistTemplateInsertCache          = make(map[string]insertCache)
	checklistTemplateUpdateCacheMut       sync.RWMutex
	checklistTemplateUpdateCache          = make(map[string]updateCache)
	checklistTemplateUpsertCacheMut       sync.RWMutex
	checklistTemplateUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var checklistTemplateAfterSelectHooks []ChecklistTemplateHook

var checklistTemplateBeforeInsertHooks []ChecklistTemplateHook
var checklistTemplateAfterInsertHooks []ChecklistTemplateHook

var checklistTemplateBeforeUpdateHooks []ChecklistTemplateHook
var checklistTemplateAfterUpdateHooks []ChecklistTemplateHook

var checklistTemplateBeforeDeleteHooks []ChecklistTemplateHook
var checklistTemplateAfterDeleteHooks []ChecklistTemplateHook

var checklistTemplateBeforeUpsertHooks []ChecklistTemplateHook
var checklistTemplateAfterUpsertHooks []ChecklistTemplateHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ChecklistTemplate) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range checklistTemplateAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ChecklistTemplate) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range checklistTemplateBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ChecklistTemplate) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range checklistTemplateAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ChecklistTemplate) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range checklistTemplateBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ChecklistTemplate) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range checklistTemplateAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ChecklistTemplate) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range checklistTemplateBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ChecklistTemplate) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range checklistTemplateAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ChecklistTemplate) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range checklistTemplateBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ChecklistTemplate) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range checklistTemplateAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddChecklistTemplateHook registers your hook function for all future operations.
func AddChecklistTemplateHook(hookPoint boil.HookPoint, checklistTemplateHook ChecklistTemplateHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		checklistTemplateAfterSelectHooks = append(checklistTemplateAfterSelectHooks, checklistTemplateHook)
	case boil.BeforeInsertHook:
		checklistTemplateBeforeInsertHooks = append(checklistTemplateBeforeInsertHooks, checklistTemplateHook)
	case boil.AfterInsertHook:
		checklistTemplateAfterInsertHooks = append(checklistTemplateAfterInsertHooks, checklistTemplateHook)
	case boil.BeforeUpdateHook:
		checklistTemplateBeforeUpdateHooks = append(checklistTemplateBeforeUpdateHooks, checklistTemplateHook)
	case boil.AfterUpdateHook:
		checklistTemplateAfterUpdateHooks = append(checklistTemplateAfterUpdateHooks, checklistTemplateHook)
	case boil.BeforeDeleteHook:
		checklistTemplateBeforeDeleteHooks = append(checklistTemplateBeforeDeleteHooks, checklistTemplateHook)
	case boil.AfterDeleteHook:
		checklistTemplateAfterDeleteHooks = append(checklistTemplateAfterDeleteHooks, checklistTemplateHook)
	case boil.BeforeUpsertHook:
		checklistTemplateBeforeUpsertHooks = append(checklistTemplateBeforeUpsertHooks, checklistTemplateHook)
	case boil.AfterUpsertHook:
		checklistTemplateAfterUpsertHooks = append(checklistTemplateAfterUpsertHooks, checklistTemplateHook)
	}
}

// One returns a single checklistTemplate record from the query.
func (q checklistTemplateQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ChecklistTemplate, error) {
	o := &ChecklistTemplate{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for checklist_templates")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ChecklistTemplate records from the query.
func (q checklistTemplateQuery) All(ctx context.Context, exec boil.ContextExecutor) (ChecklistTemplateSlice, error) {
	var o []*ChecklistTemplate

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ChecklistTemplate slice")
	}

	if len(checklistTemplateAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ChecklistTemplate records in the query.
func (q checklistTemplateQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count checklist_templates rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q checklistTemplateQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if checklist_templates exists")
	}

	return count > 0, nil
}

// ChecklistTemplates retrieves all the records using an executor.
func ChecklistTemplates(mods ...qm.QueryMod) checklistTemplateQuery {
	mods = append(mods, qm.From("\"checklist_templates\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"checklist_templates\".*"})
	}

	return checklistTemplateQuery{q}
}

// FindChecklistTemplate retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindChecklistTemplate(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*ChecklistTemplate, error) {
	checklistTemplateObj := &ChecklistTemplate{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"checklist_templates\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, checklistTemplateObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from checklist_templates")
	}

	if err = checklistTemplateObj.doAfterSelectHooks(ctx, exec); err != nil {
		return checklistTemplateObj, err
	}

	return checklistTemplateObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ChecklistTemplate) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no checklist_templates provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(checklistTemplateColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	checklistTemplateInsertCacheMut.RLock()
	cache, cached := checklistTemplateInsertCache[key]
	checklistTemplateInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			checklistTemplateAllColumns,
			checklistTemplateColumnsWithDefault,
			checklistTemplateColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(checklistTemplateType, checklistTemplateMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(checklistTemplateType, checklistTemplateMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"checklist_templates\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"checklist_templates\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into checklist_templates")
	}

	if !cached {
		checklistTemplateInsertCacheMut.Lock()
		checklistTemplateInsertCache[key] = cache
		checklistTemplateInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ChecklistTemplate.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ChecklistTemplate) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	checklistTemplateUpdateCacheMut.RLock()
	cache, cached := checklistTemplateUpdateCache[key]
	checklistTemplateUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			checklistTemplateAllColumns,
			checklistTemplatePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update checklist_templates, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"checklist_templates\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, checklistTemplatePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(checklistTemplateType, checklistTemplateMapping, append(wl, checklistTemplatePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update checklist_templates row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for checklist_templates")
	}

	if !cached {
		checklistTemplateUpdateCacheMut.Lock()
		checklistTemplateUpdateCache[key] = cache
		checklistTemplateUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q checklistTemplateQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for checklist_templates")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for checklist_templates")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ChecklistTemplateSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), checklistTemplatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"checklist_templates\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, checklistTemplatePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in checklistTemplate slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all checklistTemplate")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ChecklistTemplate) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no checklist_templates provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(checklistTemplateColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	checklistTemplateUpsertCacheMut.RLock()
	cache, cached := checklistTemplateUpsertCache[key]
	checklistTemplateUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			checklistTemplateAllColumns,
			checklistTemplateColumnsWithDefault,
			checklistTemplateColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			checklistTemplateAllColumns,
			checklistTemplatePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert checklist_templates, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(checklistTemplatePrimaryKeyColumns))
			copy(conflict, checklistTemplatePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"checklist_templates\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(checklistTemplateType, checklistTemplateMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(checklistTemplateType, checklistTemplateMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert checklist_templates")
	}

	if !cached {
		checklistTemplateUpsertCacheMut.Lock()
		checklistTemplateUpsertCache[key] = cache
		checklistTemplateUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ChecklistTemplate record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ChecklistTemplate) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ChecklistTemplate provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), checklistTemplatePrimaryKeyMapping)
	sql := "DELETE FROM \"checklist_templates\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from checklist_templates")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for checklist_templates")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q checklistTemplateQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no checklistTemplateQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from checklist_templates")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for checklist_templates")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ChecklistTemplateSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(checklistTemplateBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), checklistTemplatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"checklist_templates\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, checklistTemplatePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from checklistTemplate slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for checklist_templates")
	}

	if len(checklistTemplateAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ChecklistTemplate) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindChecklistTemplate(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ChecklistTemplateSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ChecklistTemplateSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), checklistTemplatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"checklist_templates\".* FROM \"checklist_templates\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, checklistTemplatePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ChecklistTemplateSlice")
	}

	*o = slice

	return nil
}

// ChecklistTemplateExists checks if the ChecklistTemplate row exists.
func ChecklistTemplateExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"checklist_templates\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if checklist_templates exists")
	}

	return exists, nil
}

// Exists checks if the ChecklistTemplate row exists.
func (o *ChecklistTemplate) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ChecklistTemplateExists(ctx, exec, o.ID)
}
