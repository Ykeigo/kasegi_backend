// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// GameMatchSelectionItem is an object representing the database table.
type GameMatchSelectionItem struct {
	ID      int    `boil:"id" json:"id" toml:"id" yaml:"id"`
	MatchID int    `boil:"match_id" json:"match_id" toml:"match_id" yaml:"match_id"`
	Title   string `boil:"title" json:"title" toml:"title" yaml:"title"`
	Checked bool   `boil:"checked" json:"checked" toml:"checked" yaml:"checked"`

	R *gameMatchSelectionItemR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L gameMatchSelectionItemL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var GameMatchSelectionItemColumns = struct {
	ID      string
	MatchID string
	Title   string
	Checked string
}{
	ID:      "id",
	MatchID: "match_id",
	Title:   "title",
	Checked: "checked",
}

var GameMatchSelectionItemTableColumns = struct {
	ID      string
	MatchID string
	Title   string
	Checked string
}{
	ID:      "game_match_selection_items.id",
	MatchID: "game_match_selection_items.match_id",
	Title:   "game_match_selection_items.title",
	Checked: "game_match_selection_items.checked",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod   { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod  { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) ILIKE(x string) qm.QueryMod  { return qm.Where(w.field+" ILIKE ?", x) }
func (w whereHelperstring) NILIKE(x string) qm.QueryMod { return qm.Where(w.field+" NOT ILIKE ?", x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var GameMatchSelectionItemWhere = struct {
	ID      whereHelperint
	MatchID whereHelperint
	Title   whereHelperstring
	Checked whereHelperbool
}{
	ID:      whereHelperint{field: "\"game_match_selection_items\".\"id\""},
	MatchID: whereHelperint{field: "\"game_match_selection_items\".\"match_id\""},
	Title:   whereHelperstring{field: "\"game_match_selection_items\".\"title\""},
	Checked: whereHelperbool{field: "\"game_match_selection_items\".\"checked\""},
}

// GameMatchSelectionItemRels is where relationship names are stored.
var GameMatchSelectionItemRels = struct {
}{}

// gameMatchSelectionItemR is where relationships are stored.
type gameMatchSelectionItemR struct {
}

// NewStruct creates a new relationship struct
func (*gameMatchSelectionItemR) NewStruct() *gameMatchSelectionItemR {
	return &gameMatchSelectionItemR{}
}

// gameMatchSelectionItemL is where Load methods for each relationship are stored.
type gameMatchSelectionItemL struct{}

var (
	gameMatchSelectionItemAllColumns            = []string{"id", "match_id", "title", "checked"}
	gameMatchSelectionItemColumnsWithoutDefault = []string{"match_id", "title", "checked"}
	gameMatchSelectionItemColumnsWithDefault    = []string{"id"}
	gameMatchSelectionItemPrimaryKeyColumns     = []string{"id"}
	gameMatchSelectionItemGeneratedColumns      = []string{}
)

type (
	// GameMatchSelectionItemSlice is an alias for a slice of pointers to GameMatchSelectionItem.
	// This should almost always be used instead of []GameMatchSelectionItem.
	GameMatchSelectionItemSlice []*GameMatchSelectionItem
	// GameMatchSelectionItemHook is the signature for custom GameMatchSelectionItem hook methods
	GameMatchSelectionItemHook func(context.Context, boil.ContextExecutor, *GameMatchSelectionItem) error

	gameMatchSelectionItemQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	gameMatchSelectionItemType                 = reflect.TypeOf(&GameMatchSelectionItem{})
	gameMatchSelectionItemMapping              = queries.MakeStructMapping(gameMatchSelectionItemType)
	gameMatchSelectionItemPrimaryKeyMapping, _ = queries.BindMapping(gameMatchSelectionItemType, gameMatchSelectionItemMapping, gameMatchSelectionItemPrimaryKeyColumns)
	gameMatchSelectionItemInsertCacheMut       sync.RWMutex
	gameMatchSelectionItemInsertCache          = make(map[string]insertCache)
	gameMatchSelectionItemUpdateCacheMut       sync.RWMutex
	gameMatchSelectionItemUpdateCache          = make(map[string]updateCache)
	gameMatchSelectionItemUpsertCacheMut       sync.RWMutex
	gameMatchSelectionItemUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var gameMatchSelectionItemAfterSelectHooks []GameMatchSelectionItemHook

var gameMatchSelectionItemBeforeInsertHooks []GameMatchSelectionItemHook
var gameMatchSelectionItemAfterInsertHooks []GameMatchSelectionItemHook

var gameMatchSelectionItemBeforeUpdateHooks []GameMatchSelectionItemHook
var gameMatchSelectionItemAfterUpdateHooks []GameMatchSelectionItemHook

var gameMatchSelectionItemBeforeDeleteHooks []GameMatchSelectionItemHook
var gameMatchSelectionItemAfterDeleteHooks []GameMatchSelectionItemHook

var gameMatchSelectionItemBeforeUpsertHooks []GameMatchSelectionItemHook
var gameMatchSelectionItemAfterUpsertHooks []GameMatchSelectionItemHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *GameMatchSelectionItem) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gameMatchSelectionItemAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *GameMatchSelectionItem) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gameMatchSelectionItemBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *GameMatchSelectionItem) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gameMatchSelectionItemAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *GameMatchSelectionItem) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gameMatchSelectionItemBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *GameMatchSelectionItem) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gameMatchSelectionItemAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *GameMatchSelectionItem) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gameMatchSelectionItemBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *GameMatchSelectionItem) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gameMatchSelectionItemAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *GameMatchSelectionItem) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gameMatchSelectionItemBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *GameMatchSelectionItem) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gameMatchSelectionItemAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddGameMatchSelectionItemHook registers your hook function for all future operations.
func AddGameMatchSelectionItemHook(hookPoint boil.HookPoint, gameMatchSelectionItemHook GameMatchSelectionItemHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		gameMatchSelectionItemAfterSelectHooks = append(gameMatchSelectionItemAfterSelectHooks, gameMatchSelectionItemHook)
	case boil.BeforeInsertHook:
		gameMatchSelectionItemBeforeInsertHooks = append(gameMatchSelectionItemBeforeInsertHooks, gameMatchSelectionItemHook)
	case boil.AfterInsertHook:
		gameMatchSelectionItemAfterInsertHooks = append(gameMatchSelectionItemAfterInsertHooks, gameMatchSelectionItemHook)
	case boil.BeforeUpdateHook:
		gameMatchSelectionItemBeforeUpdateHooks = append(gameMatchSelectionItemBeforeUpdateHooks, gameMatchSelectionItemHook)
	case boil.AfterUpdateHook:
		gameMatchSelectionItemAfterUpdateHooks = append(gameMatchSelectionItemAfterUpdateHooks, gameMatchSelectionItemHook)
	case boil.BeforeDeleteHook:
		gameMatchSelectionItemBeforeDeleteHooks = append(gameMatchSelectionItemBeforeDeleteHooks, gameMatchSelectionItemHook)
	case boil.AfterDeleteHook:
		gameMatchSelectionItemAfterDeleteHooks = append(gameMatchSelectionItemAfterDeleteHooks, gameMatchSelectionItemHook)
	case boil.BeforeUpsertHook:
		gameMatchSelectionItemBeforeUpsertHooks = append(gameMatchSelectionItemBeforeUpsertHooks, gameMatchSelectionItemHook)
	case boil.AfterUpsertHook:
		gameMatchSelectionItemAfterUpsertHooks = append(gameMatchSelectionItemAfterUpsertHooks, gameMatchSelectionItemHook)
	}
}

// One returns a single gameMatchSelectionItem record from the query.
func (q gameMatchSelectionItemQuery) One(ctx context.Context, exec boil.ContextExecutor) (*GameMatchSelectionItem, error) {
	o := &GameMatchSelectionItem{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for game_match_selection_items")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all GameMatchSelectionItem records from the query.
func (q gameMatchSelectionItemQuery) All(ctx context.Context, exec boil.ContextExecutor) (GameMatchSelectionItemSlice, error) {
	var o []*GameMatchSelectionItem

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to GameMatchSelectionItem slice")
	}

	if len(gameMatchSelectionItemAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all GameMatchSelectionItem records in the query.
func (q gameMatchSelectionItemQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count game_match_selection_items rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q gameMatchSelectionItemQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if game_match_selection_items exists")
	}

	return count > 0, nil
}

// GameMatchSelectionItems retrieves all the records using an executor.
func GameMatchSelectionItems(mods ...qm.QueryMod) gameMatchSelectionItemQuery {
	mods = append(mods, qm.From("\"game_match_selection_items\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"game_match_selection_items\".*"})
	}

	return gameMatchSelectionItemQuery{q}
}

// FindGameMatchSelectionItem retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindGameMatchSelectionItem(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*GameMatchSelectionItem, error) {
	gameMatchSelectionItemObj := &GameMatchSelectionItem{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"game_match_selection_items\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, gameMatchSelectionItemObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from game_match_selection_items")
	}

	if err = gameMatchSelectionItemObj.doAfterSelectHooks(ctx, exec); err != nil {
		return gameMatchSelectionItemObj, err
	}

	return gameMatchSelectionItemObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *GameMatchSelectionItem) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no game_match_selection_items provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(gameMatchSelectionItemColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	gameMatchSelectionItemInsertCacheMut.RLock()
	cache, cached := gameMatchSelectionItemInsertCache[key]
	gameMatchSelectionItemInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			gameMatchSelectionItemAllColumns,
			gameMatchSelectionItemColumnsWithDefault,
			gameMatchSelectionItemColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(gameMatchSelectionItemType, gameMatchSelectionItemMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(gameMatchSelectionItemType, gameMatchSelectionItemMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"game_match_selection_items\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"game_match_selection_items\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into game_match_selection_items")
	}

	if !cached {
		gameMatchSelectionItemInsertCacheMut.Lock()
		gameMatchSelectionItemInsertCache[key] = cache
		gameMatchSelectionItemInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the GameMatchSelectionItem.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *GameMatchSelectionItem) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	gameMatchSelectionItemUpdateCacheMut.RLock()
	cache, cached := gameMatchSelectionItemUpdateCache[key]
	gameMatchSelectionItemUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			gameMatchSelectionItemAllColumns,
			gameMatchSelectionItemPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update game_match_selection_items, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"game_match_selection_items\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, gameMatchSelectionItemPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(gameMatchSelectionItemType, gameMatchSelectionItemMapping, append(wl, gameMatchSelectionItemPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update game_match_selection_items row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for game_match_selection_items")
	}

	if !cached {
		gameMatchSelectionItemUpdateCacheMut.Lock()
		gameMatchSelectionItemUpdateCache[key] = cache
		gameMatchSelectionItemUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q gameMatchSelectionItemQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for game_match_selection_items")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for game_match_selection_items")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o GameMatchSelectionItemSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), gameMatchSelectionItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"game_match_selection_items\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, gameMatchSelectionItemPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in gameMatchSelectionItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all gameMatchSelectionItem")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *GameMatchSelectionItem) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no game_match_selection_items provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(gameMatchSelectionItemColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	gameMatchSelectionItemUpsertCacheMut.RLock()
	cache, cached := gameMatchSelectionItemUpsertCache[key]
	gameMatchSelectionItemUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			gameMatchSelectionItemAllColumns,
			gameMatchSelectionItemColumnsWithDefault,
			gameMatchSelectionItemColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			gameMatchSelectionItemAllColumns,
			gameMatchSelectionItemPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert game_match_selection_items, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(gameMatchSelectionItemPrimaryKeyColumns))
			copy(conflict, gameMatchSelectionItemPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"game_match_selection_items\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(gameMatchSelectionItemType, gameMatchSelectionItemMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(gameMatchSelectionItemType, gameMatchSelectionItemMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert game_match_selection_items")
	}

	if !cached {
		gameMatchSelectionItemUpsertCacheMut.Lock()
		gameMatchSelectionItemUpsertCache[key] = cache
		gameMatchSelectionItemUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single GameMatchSelectionItem record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *GameMatchSelectionItem) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no GameMatchSelectionItem provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), gameMatchSelectionItemPrimaryKeyMapping)
	sql := "DELETE FROM \"game_match_selection_items\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from game_match_selection_items")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for game_match_selection_items")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q gameMatchSelectionItemQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no gameMatchSelectionItemQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from game_match_selection_items")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for game_match_selection_items")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o GameMatchSelectionItemSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(gameMatchSelectionItemBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), gameMatchSelectionItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"game_match_selection_items\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, gameMatchSelectionItemPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from gameMatchSelectionItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for game_match_selection_items")
	}

	if len(gameMatchSelectionItemAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *GameMatchSelectionItem) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindGameMatchSelectionItem(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GameMatchSelectionItemSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := GameMatchSelectionItemSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), gameMatchSelectionItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"game_match_selection_items\".* FROM \"game_match_selection_items\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, gameMatchSelectionItemPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in GameMatchSelectionItemSlice")
	}

	*o = slice

	return nil
}

// GameMatchSelectionItemExists checks if the GameMatchSelectionItem row exists.
func GameMatchSelectionItemExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"game_match_selection_items\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if game_match_selection_items exists")
	}

	return exists, nil
}

// Exists checks if the GameMatchSelectionItem row exists.
func (o *GameMatchSelectionItem) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return GameMatchSelectionItemExists(ctx, exec, o.ID)
}
